// <auto-generated />
using DRYV1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DRYV1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241021090514_instrumensv2")]
    partial class instrumensv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DRYV1.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasDiscriminator().HasValue("Instrument");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DRYV1.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DRYV1.Models.Drums", b =>
                {
                    b.HasBaseType("DRYV1.Models.Instrument");

                    b.Property<string>("DrumKitSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfDrums")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Drums");
                });

            modelBuilder.Entity("DRYV1.Models.Guitar", b =>
                {
                    b.HasBaseType("DRYV1.Models.Instrument");

                    b.Property<string>("PickupType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfGuitar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Guitar");
                });

            modelBuilder.Entity("DRYV1.Models.Drums", b =>
                {
                    b.HasOne("DRYV1.Models.User", "User")
                        .WithMany("Drums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRYV1.Models.Guitar", b =>
                {
                    b.HasOne("DRYV1.Models.User", "User")
                        .WithMany("Guitars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRYV1.Models.User", b =>
                {
                    b.Navigation("Drums");

                    b.Navigation("Guitars");
                });
#pragma warning restore 612, 618
        }
    }
}
